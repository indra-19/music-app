{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","loading","setLoading","musics","setMusics","play","setPlay","name","setName","title","setTitle","search","setSearch","url","setUrl","useEffect","loadMusics","a","axios","get","res","data","tracks","console","log","Search","AppBar","position","sx","p","backgroundColor","Paper","display","alignItems","borderRadius","color","InputBase","id","ml","placeholder","value","fullWidth","onChange","e","target","autoComplete","autoFocus","Content","props","CardActionArea","onClick","pause","Audio","preview","artist","Grid","container","item","xs","direction","width","CardMedia","component","height","image","img","alt","Container","maxWidth","minHeight","Box","justifyContent","CircularProgress","map","artistName","albumId","previewURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.923da9b9.chunk.js","sourcesContent":["import './App.css';\nimport { AppBar, Paper, InputBase, Container, CardMedia, CardActionArea, Grid, Box, CircularProgress } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [loading, setLoading] = useState(false)\n  const [musics, setMusics] = useState([])\n  const [play, setPlay] = useState(\"\")\n  const [name, setName] = useState(\"\")\n  const [title, setTitle] = useState(\"\")\n  const [search, setSearch] = useState(\"\")\n  const [url, setUrl] = useState('https://api.napster.com/v2.2/tracks/top?apikey=N2EwY2E0Y2ItMTI4ZS00ZTg3LTg4MmEtY2JiMTdhODQxYzUw&range=day')\n\n  useEffect(() => {\n    if (search === \"\") { \n      setUrl('https://api.napster.com/v2.2/tracks/top?apikey=N2EwY2E0Y2ItMTI4ZS00ZTg3LTg4MmEtY2JiMTdhODQxYzUw&range=day') \n    } else {\n      setUrl(`https://api.napster.com/v2.2/search/verbose?apikey=N2EwY2E0Y2ItMTI4ZS00ZTg3LTg4MmEtY2JiMTdhODQxYzUw&query=${search}&type=track`)\n    }\n  }, [search]);\n\n  useEffect(() => {\n    const loadMusics = async () => {\n      setLoading(true);\n      const res = await axios.get(url);\n      if (url === 'https://api.napster.com/v2.2/tracks/top?apikey=N2EwY2E0Y2ItMTI4ZS00ZTg3LTg4MmEtY2JiMTdhODQxYzUw&range=day') { \n        setMusics(res.data.tracks) \n      } else {\n        setMusics(res.data.search.data.tracks)\n      }\n      setLoading(false);\n      console.log(res);\n    };\n    loadMusics();\n  }, [url]);\n\n  useEffect(() => {\n    if (play === \"\") {\n    } else {\n      play.play()\n    }\n  }, [play]);\n  \n  const Search = () => {\n    return (\n      <AppBar position=\"sticky\" sx={{ p: '10px 0', backgroundColor: '#000000' }}>\n        <Paper sx={{ p: '2px 11px', display: 'flex', alignItems: 'center', backgroundColor: '#161616', borderRadius: '5px' }}>\n          <SearchIcon sx={{color: \"#ffffff\"}} />\n          {search === \"\" ? <InputBase id=\"input\" sx={{ ml: 2, color: '#ffffff' }} placeholder=\"Cari\" value={search} fullWidth=\"true\" \n          onChange={(e) => {setSearch(e.target.value)}} autoComplete=\"off\" /> \n          : <InputBase id=\"input\" sx={{ ml: 2, color: '#ffffff' }} placeholder=\"Cari\" value={search} fullWidth=\"true\" \n          onChange={(e) => {setSearch(e.target.value)}} autoFocus autoComplete=\"off\" />}\n        </Paper>\n        {name === \"\" && title === \"\" ? null : <h6 id=\"onplaying\">On Playing : {name} - {title}</h6>}\n      </AppBar>\n    );\n  }\n\n  const Content = (props) => {\n    return (\n      <CardActionArea sx={{ p: '5px 0' }}>\n        <Paper sx={{ backgroundColor: '#161616', color: '#ffffff', borderRadius: '5px' }} \n        onClick={() => {if (play === \"\") {} else {play.pause()}; setPlay(new Audio(props.preview)); setName(props.artist); setTitle(props.name)}}>\n          <Grid container sx={{ alignItems: 'center' }}>\n            <Grid item xs={8} container direction=\"column\">\n              <Grid item sx={{ width: '100%' }}>\n                <h6 id=\"title\">{props.name}</h6>\n              </Grid>\n              <Grid item sx={{ width: '100%' }}>\n                <h6 id=\"subtitle\">{props.artist}</h6>\n              </Grid>\n            </Grid>\n            <Grid item xs={4}>\n              <CardMedia sx={{ borderRadius: '0 5px 5px 0' }}\n              component=\"img\" height=\"67px\"\n              image={`https://api.napster.com/imageserver/v2/albums/${props.img}/images/633x422.jpg`}\n              alt=\"No image\" />\n            </Grid>\n          </Grid>\n        </Paper>\n      </CardActionArea>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"sm\" sx={{ p: '0 20px', backgroundColor: '#000000', minHeight: '100vh' }}>\n      <Search />\n      {loading ? (\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '75vh' }}><CircularProgress /></Box>\n      ) : (\n          musics.map((item) => <Content name={item.name} artist={item.artistName} img={item.albumId} preview={item.previewURL} />)\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}